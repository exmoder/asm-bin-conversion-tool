def read_lines(input_str: str) -> list[str]:
    return input_str.strip().split("\n")

# собираем список инструкций в двоичный код
def assemble_to_binary(instruction_list: list[str], display_output=True) -> str:
    binary_output = ''
    for instruction in instruction_list:
        binary_output += asm_to_bin_map.get(instruction, instruction)

    if display_output:
        print("Двоичный вывод:", binary_output)

    return binary_output

# двоичный код обратно в ассемблер
def binary_to_assemble(binary_input: str, display_output=True) -> str:
    binary_input = binary_input.replace(" ", "").replace("\n", "").upper()
    sorted_input = [binary_input[i:i + 2] for i in range(0, len(binary_input), 2)]
    assemble_output = ''
    index = 0
    while index < len(sorted_input):
        # обработка пар символов и преобразование их в ассемблер
        for j in range(int(byte_map.get(sorted_input[index])[-1])):
            assemble_output += sorted_input[index + j]
            if j == 0:
                assemble_output += " "
        assemble_output += " --> "
        for j in range(int(byte_map.get(sorted_input[index])[-1])):
            if j == 0:
                assemble_output += str(byte_map.get(sorted_input[index - j]))[:-2]
            else:
                assemble_output = assemble_output.replace("{}", sorted_input[index], 1)
            index += 1
        assemble_output += "\n"

    if display_output:
        print(assemble_output)
    return assemble_output

# поиск ключа в словаре по значению
def find_key(dictionary, value):
    for key, val in dictionary.items():
        if val == value:
            return key
    return "Недопустимая инструкция"

# cловарь для ассемблерных инструкций с двоичным кодом
asm_to_bin_map = {
    'NOP': '00',
    'AJMP addr': '01',
    'LJMP addr': '02',
    'RR A': '03',
    'INC A': '04',
    'INC data addr': '05',
    'INC @R0': '06',
    'INC @R1': '07',
    'INC R0': '08',
    'INC R1': '09',
    'INC R2': '0A',
    'INC R3': '0B',
    'INC R4': '0C',
    'INC R5': '0D',
    'INC R6': '0E',
    'INC R7': '0F',
    'JBC bit addr, addr': '10',
    'ACALL addr': '11',
    'LCALL addr': '12',
    'RRC A': '13',
    'DEC A': '14',
    'DEC data addr': '15',
    'DEC @R0': '16',
    'DEC @R1': '17',
    'DEC R0': '18',
    'DEC R1': '19',
    'DEC R2': '1A',
    'DEC R3': '1B',
    'DEC R4': '1C',
    'DEC R5': '1D',
    'DEC R6': '1E',
    'DEC R7': '1F',
    'JB bit addr, addr': '20',
    'AJMP addr': '21',
    'RET': '22',
    'RL A': '23',
    'ADD A,#data': '24',
    'ADD A,data addr': '25',
    'ADD A,@R0': '26',
    'ADD A,@R1': '27',
    'ADD A,R0': '28',
    'ADD A,R1': '29',
    'ADD A,R2': '2A',
    'ADD A,R3': '2B',
    'ADD A,R4': '2C',
    'ADD A,R5': '2D',
    'ADD A,R6': '2E',
    'ADD A,R7': '2F',
    'JNB bit addr, addr': '30',
    'ACALL addr': '31',
    'RETI': '32',
    'RLC A': '33',
    'ADDC A,#data': '34',
    'ADDC A,data addr': '35',
    'ADDC A,@R0': '36',
    'ADDC A,@R1': '37',
    'ADDC A,R0': '38',
    'ADDC A,R1': '39',
    'ADDC A,R2': '3A',
    'ADDC A,R3': '3B',
    'ADDC A,R4': '3C',
    'ADDC A,R5': '3D',
    'ADDC A,R6': '3E',
    'ADDC A,R7': '3F',
    'JC addr': '40',
    'AJMP addr': '41',
    'ORL data addr,A': '42',
    'ORL data addr,#data': '43',
    'ORL A,#data': '44',
    'ORL A,data addr': '45',
    'ORL A,@R0': '46',
    'ORL A,@R1': '47',
    'ORL A,R0': '48',
    'ORL A,R1': '49',
    'ORL A,R2': '4A',
    'ORL A,R3': '4B',
    'ORL A,R4': '4C',
    'ORL A,R5': '4D',
    'ORL A,R6': '4E',
    'ORL A,R7': '4F',
    'JNC addr': '50',
    'ACALL addr': '51',
    'ANL data addr,A': '52',
    'ANL data addr,#data': '53',
    'ANL A,#data': '54',
    'ANL A,data addr': '55',
    'ANL A,@R0': '56',
    'ANL A,@R1': '57',
    'ANL A,R0': '58',
    'ANL A,R1': '59',
    'ANL A,R2': '5A',
    'ANL A,R3': '5B',
    'ANL A,R4': '5C',
    'ANL A,R5': '5D',
    'ANL A,R6': '5E',
    'ANL A,R7': '5F',
    'JZ addr': '60',
    'AJMP addr': '61',
    'XRL data addr,A': '62',
    'XRL data addr,#data': '63',
    'XRL A,#data': '64',
    'XRL A,data addr': '65',
    'XRL A,@R0': '66',
    'XRL A,@R1': '67',
    'XRL A,R0': '68',
    'XRL A,R1': '69',
    'XRL A,R2': '6A',
    'XRL A,R3': '6B',
    'XRL A,R4': '6C',
    'XRL A,R5': '6D',
    'XRL A,R6': '6E',
    'XRL A,R7': '6F',
    'JNZ addr': '70',
    'ACALL addr': '71',
    'ORL C,bit addr': '72',
    'JMP @A+DPTR': '73',
    'MOV A,#data': '74',
    'MOV data addr,#data': '75',
    'MOV @R0,#data': '76',
    'MOV @R1,#data': '77',
    'MOV R0,#data': '78',
    'MOV R1,#data': '79',
    'MOV R2,#data': '7A',
    'MOV R3,#data': '7B',
    'MOV R4,#data': '7C',
    'MOV R5,#data': '7D',
    'MOV R6,#data': '7E',
    'MOV R7,#data': '7F',
    'SJMP addr': '80',
    'AJMP addr': '81',
    'ANL C,bit addr': '82',
    'MOVC A,@A+PC': '83',
    'DIV AB': '84',
    'MOV data addr,data addr': '85',
    'MOV data addr,@R0': '86',
    'MOV data addr,@R1': '87',
    'MOV data addr,R0': '88',
    'MOV data addr,R1': '89',
    'MOV data addr,R2': '8A',
    'MOV data addr,R3': '8B',
    'MOV data addr,R4': '8C',
    'MOV data addr,R5': '8D',
    'MOV data addr,R6': '8E',
    'MOV data addr,R7': '8F',
    'MOV DPTR,#data': '90',
    'ACALL addr': '91',
    'MOV bit addr,C': '92',
    'MOVC A,@A+DPTR': '93',
    'SUBB A,#data': '94',
    'SUBB A,data addr': '95',
    'SUBB A,@R0': '96',
    'SUBB A,@R1': '97',
    'SUBB A,R0': '98',
    'SUBB A,R1': '99',
    'SUBB A,R2': '9A',
    'SUBB A,R3': '9B',
    'SUBB A,R4': '9C',
    'SUBB A,R5': '9D',
    'SUBB A,R6': '9E',
    'SUBB A,R7': '9F',
    'ORL C,/bit addr': 'A0',
    'AJMP addr': 'A1',
    'MOV C,bit addr': 'A2',
    'INC DPTR': 'A3',
    'MUL AB': 'A4',
    'reserved': 'A5',
    'MOV @R0,data addr': 'A6',
    'MOV @R1,data addr': 'A7',
    'MOV R0,data addr': 'A8',
    'MOV R1,data addr': 'A9',
    'MOV R2,data addr': 'AA',
    'MOV R3,data addr': 'AB',
    'MOV R4,data addr': 'AC',
    'MOV R5,data addr': 'AD',
    'MOV R6,data addr': 'AE',
    'MOV R7,data addr': 'AF',
    'ANL C,/bit addr': 'B0',
    'ACALL addr': 'B1',
    'CPL bit addr': 'B2',
    'CPL C': 'B3',
    'CJNE A,#data, addr': 'B4',
    'CJNE A,data addr, addr': 'B5',
    'CJNE @R0,#data, addr': 'B6',
    'CJNE @R1,#data, addr': 'B7',
    'CJNE R0,#data, addr': 'B8',
    'CJNE R1,#data, addr': 'B9',
    'CJNE R2,#data, addr': 'BA',
    'CJNE R3,#data, addr': 'BB',
    'CJNE R4,#data, addr': 'BC',
    'CJNE R5,#data, addr': 'BD',
    'CJNE R6,#data, addr': 'BE',
    'CJNE R7,#data, addr': 'BF',
    'PUSH data addr': 'C0',
    'AJMP addr': 'C1',
    'CLR bit addr': 'C2',
    'CLR C': 'C3',
    'SWAP A': 'C4',
    'XCH A,data addr': 'C5',
    'XCH A,@R0': 'C6',
    'XCH A,@R1': 'C7',
    'XCH A,R0': 'C8',
    'XCH A,R1': 'C9',
    'XCH A,R2': 'CA',
    'XCH A,R3': 'CB',
    'XCH A,R4': 'CC',
    'XCH A,R5': 'CD',
    'XCH A,R6': 'CE',
    'XCH A,R7': 'CF',
    'POP data addr': 'D0',
    'ACALL addr': 'D1',
    'SETB bit addr': 'D2',
    'SETB C': 'D3',
    'DA A': 'D4',
    'DJNZ data addr, addr': 'D5',
    'XCHD A,@R0': 'D6',
    'XCHD A,@R1': 'D7',
    'DJNZ R0, addr': 'D8',
    'DJNZ R1, addr': 'D9',
    'DJNZ R2, addr': 'DA',
    'DJNZ R3, addr': 'DB',
    'DJNZ R4, addr': 'DC',
    'DJNZ R5, addr': 'DD',
    'DJNZ R6, addr': 'DE',
    'DJNZ R7, addr': 'DF',
    'MOVX A,@DPTR': 'E0',
    'AJMP addr': 'E1',
    'MOVX A,@R0': 'E2',
    'MOVX A,@R1': 'E3',
    'CLR A': 'E4',
    'MOV A,data addr': 'E5',
    'MOV A,@R0': 'E6',
    'MOV A,@R1': 'E7',
    'MOV A,R0': 'E8',
    'MOV A,R1': 'E9',
    'MOV A,R2': 'EA',
    'MOV A,R3': 'EB',
    'MOV A,R4': 'EC',
    'MOV A,R5': 'ED',
    'MOV A,R6': 'EE',
    'MOV A,R7': 'EF',
    'MOVX @DPTR,A': 'F0',
    'ACALL addr': 'F1',
    'MOVX @R0,A': 'F2',
    'MOVX @R1,A': 'F3',
    'CPL A': 'F4',
    'MOV data addr,A': 'F5',
    'MOV @R0,A': 'F6',
    'MOV @R1,A': 'F7',
    'MOV R0,A': 'F8',
    'MOV R1,A': 'F9',
    'MOV R2,A': 'FA',
    'MOV R3,A': 'FB',
    'MOV R4,A': 'FC',
    'MOV R5,A': 'FD',
    'MOV R6,A': 'FE',
    'MOV R7,A': 'FF',
}

# словарь для двоичного кода с ассемблерными инструкциями и их длиной
byte_map = {
    '00': 'NOP 1',
    'E1': 'AJMP #0x{} 2',
    '02': 'LJMP #0x{} 3',
    '03': 'RR A 1',
    '04': 'INC A 1',
    '05': 'INC 0x{} 2',
    '06': 'INC @R0 1',
    '07': 'INC @R1 1',
    '08': 'INC R0 1',
    '09': 'INC R1 1',
    '0A': 'INC R2 1',
    '0B': 'INC R3 1',
    '0C': 'INC R4 1',
    '0D': 'INC R5 1',
    '0E': 'INC R6 1',
    '0F': 'INC R7 1',
    '10': 'JBC {}, #0x{} 3',
    'F1': 'ACALL #0x{} 2',
    '12': 'LCALL #0x{} 3',
    '13': 'RRC A 1',
    '14': 'DEC A 1',
    '15': 'DEC 0x{} 2',
    '16': 'DEC @R0 1',
    '17': 'DEC @R1 1',
    '18': 'DEC R0 1',
    '19': 'DEC R1 1',
    '1A': 'DEC R2 1',
    '1B': 'DEC R3 1',
    '1C': 'DEC R4 1',
    '1D': 'DEC R5 1',
    '1E': 'DEC R6 1',
    '1F': 'DEC R7 1',
    '20': 'JB {}, #0x{} 3',
    '22': 'RET 1',
    '23': 'RL A 1',
    '24': 'ADD A,##{} 2',
    '25': 'ADD A,0x{} 2',
    '26': 'ADD A,@R0 1',
    '27': 'ADD A,@R1 1',
    '28': 'ADD A,R0 1',
    '29': 'ADD A,R1 1',
    '2A': 'ADD A,R2 1',
    '2B': 'ADD A,R3 1',
    '2C': 'ADD A,R4 1',
    '2D': 'ADD A,R5 1',
    '2E': 'ADD A,R6 1',
    '2F': 'ADD A,R7 1',
    '30': 'JNB {}, #0x{} 3',
    '32': 'RETI 1',
    '33': 'RLC A 1',
    '34': 'ADDC A,##{} 2',
    '35': 'ADDC A,0x{} 2',
    '36': 'ADDC A,@R0 1',
    '37': 'ADDC A,@R1 1',
    '38': 'ADDC A,R0 1',
    '39': 'ADDC A,R1 1',
    '3A': 'ADDC A,R2 1',
    '3B': 'ADDC A,R3 1',
    '3C': 'ADDC A,R4 1',
    '3D': 'ADDC A,R5 1',
    '3E': 'ADDC A,R6 1',
    '3F': 'ADDC A,R7 1',
    '40': 'JC #0x{} 2',
    '42': 'ORL 0x{},A 2',
    '43': 'ORL 0x{},##{} 3',
    '44': 'ORL A,##{} 2',
    '45': 'ORL A,0x{} 2',
    '46': 'ORL A,@R0 1',
    '47': 'ORL A,@R1 1',
    '48': 'ORL A,R0 1',
    '49': 'ORL A,R1 1',
    '4A': 'ORL A,R2 1',
    '4B': 'ORL A,R3 1',
    '4C': 'ORL A,R4 1',
    '4D': 'ORL A,R5 1',
    '4E': 'ORL A,R6 1',
    '4F': 'ORL A,R7 1',
    '50': 'JNC #0x{} 2',
    '52': 'ANL 0x{},A 2',
    '53': 'ANL 0x{},##{} 3',
    '54': 'ANL A,##{} 2',
    '55': 'ANL A,0x{} 2',
    '56': 'ANL A,@R0 1',
    '57': 'ANL A,@R1 1',
    '58': 'ANL A,R0 1',
    '59': 'ANL A,R1 1',
    '5A': 'ANL A,R2 1',
    '5B': 'ANL A,R3 1',
    '5C': 'ANL A,R4 1',
    '5D': 'ANL A,R5 1',
    '5E': 'ANL A,R6 1',
    '5F': 'ANL A,R7 1',
    '60': 'JZ #0x{} 2',
    '62': 'XRL 0x{},A 2',
    '63': 'XRL 0x{},##{} 3',
    '64': 'XRL A,##{} 2',
    '65': 'XRL A,0x{} 2',
    '66': 'XRL A,@R0 1',
    '67': 'XRL A,@R1 1',
    '68': 'XRL A,R0 1',
    '69': 'XRL A,R1 1',
    '6A': 'XRL A,R2 1',
    '6B': 'XRL A,R3 1',
    '6C': 'XRL A,R4 1',
    '6D': 'XRL A,R5 1',
    '6E': 'XRL A,R6 1',
    '6F': 'XRL A,R7 1',
    '70': 'JNZ #0x{} 2',
    '72': 'ORL C,{} 2',
    '73': 'JMP @A+DPTR 1',
    '74': 'MOV A,##{} 2',
    '75': 'MOV 0x{},##{} 3',
    '76': 'MOV @R0,##{} 2',
    '77': 'MOV @R1,##{} 2',
    '78': 'MOV R0,##{} 2',
    '79': 'MOV R1,##{} 2',
    '7A': 'MOV R2,##{} 2',
    '7B': 'MOV R3,##{} 2',
    '7C': 'MOV R4,##{} 2',
    '7D': 'MOV R5,##{} 2',
    '7E': 'MOV R6,##{} 2',
    '7F': 'MOV R7,##{} 2',
    '80': 'SJMP #0x{} 2',
    '82': 'ANL C,{} 2',
    '83': 'MOVC A,@A+PC 1',
    '84': 'DIV AB 1',
    '85': 'MOV 0x{},0x{} 3',
    '86': 'MOV 0x{},@R0 2',
    '87': 'MOV 0x{},@R1 2',
    '88': 'MOV 0x{},R0 2',
    '89': 'MOV 0x{},R1 2',
    '8A': 'MOV 0x{},R2 2',
    '8B': 'MOV 0x{},R3 2',
    '8C': 'MOV 0x{},R4 2',
    '8D': 'MOV 0x{},R5 2',
    '8E': 'MOV 0x{},R6 2',
    '8F': 'MOV 0x{},R7 2',
    '90': 'MOV DPTR,##{} 3',
    '92': 'MOV {},C 2',
    '93': 'MOVC A,@A+DPTR 1',
    '94': 'SUBB A,##{} 2',
    '95': 'SUBB A,0x{} 2',
    '96': 'SUBB A,@R0 1',
    '97': 'SUBB A,@R1 1',
    '98': 'SUBB A,R0 1',
    '99': 'SUBB A,R1 1',
    '9A': 'SUBB A,R2 1',
    '9B': 'SUBB A,R3 1',
    '9C': 'SUBB A,R4 1',
    '9D': 'SUBB A,R5 1',
    '9E': 'SUBB A,R6 1',
    '9F': 'SUBB A,R7 1',
    'A0': 'ORL C,/{} 2',
    'A2': 'MOV C,{} 2',
    'A3': 'INC DPTR 1',
    'A4': 'MUL AB 1',
    'A5': 'reserved 1',
    'A6': 'MOV @R0,0x{} 2',
    'A7': 'MOV @R1,0x{} 2',
    'A8': 'MOV R0,0x{} 2',
    'A9': 'MOV R1,0x{} 2',
    'AA': 'MOV R2,0x{} 2',
    'AB': 'MOV R3,0x{} 2',
    'AC': 'MOV R4,0x{} 2',
    'AD': 'MOV R5,0x{} 2',
    'AE': 'MOV R6,0x{} 2',
    'AF': 'MOV R7,0x{} 2',
    'B0': 'ANL C,/{} 2',
    'B2': 'CPL {} 2',
    'B3': 'CPL C 1',
    'B4': 'CJNE A,##{}, #0x{} 3',
    'B5': 'CJNE A,0x{}, #0x{} 3',
    'B6': 'CJNE @R0,##{}, #0x{} 3',
    'B7': 'CJNE @R1,##{}, #0x{} 3',
    'B8': 'CJNE R0,##{}, #0x{} 3',
    'B9': 'CJNE R1,##{}, #0x{} 3',
    'BA': 'CJNE R2,##{}, #0x{} 3',
    'BB': 'CJNE R3,##{}, #0x{} 3',
    'BC': 'CJNE R4,##{}, #0x{} 3',
    'BD': 'CJNE R5,##{}, #0x{} 3',
    'BE': 'CJNE R6,##{}, #0x{} 3',
    'BF': 'CJNE R7,##{}, #0x{} 3',
    'C0': 'PUSH 0x{} 2',
    'C2': 'CLR {} 2',
    'C3': 'CLR C 1',
    'C4': 'SWAP A 1',
    'C5': 'XCH A,0x{} 2',
    'C6': 'XCH A,@R0 1',
    'C7': 'XCH A,@R1 1',
    'C8': 'XCH A,R0 1',
    'C9': 'XCH A,R1 1',
    'CA': 'XCH A,R2 1',
    'CB': 'XCH A,R3 1',
    'CC': 'XCH A,R4 1',
    'CD': 'XCH A,R5 1',
    'CE': 'XCH A,R6 1',
    'CF': 'XCH A,R7 1',
    'D0': 'POP 0x{} 2',
    'D2': 'SETB {} 2',
    'D3': 'SETB C 1',
    'D4': 'DA A 1',
    'D5': 'DJNZ 0x{}, #0x{} 3',
    'D6': 'XCHD A,@R0 1',
    'D7': 'XCHD A,@R1 1',
    'D8': 'DJNZ R0, #0x{} 2',
    'D9': 'DJNZ R1, #0x{} 2',
    'DA': 'DJNZ R2, #0x{} 2',
    'DB': 'DJNZ R3, #0x{} 2',
    'DC': 'DJNZ R4, #0x{} 2',
    'DD': 'DJNZ R5, #0x{} 2',
    'DE': 'DJNZ R6, #0x{} 2',
    'DF': 'DJNZ R7, #0x{} 2',
    'E0': 'MOVX A,@DPTR 1',
    'E2': 'MOVX A,@R0 1',
    'E3': 'MOVX A,@R1 1',
    'E4': 'CLR A 1',
    'E5': 'MOV A,0x{} 2',
    'E6': 'MOV A,@R0 1',
    'E7': 'MOV A,@R1 1',
    'E8': 'MOV A,R0 1',
    'E9': 'MOV A,R1 1',
    'EA': 'MOV A,R2 1',
    'EB': 'MOV A,R3 1',
    'EC': 'MOV A,R4 1',
    'ED': 'MOV A,R5 1',
    'EE': 'MOV A,R6 1',
    'EF': 'MOV A,R7 1',
    'F0': 'MOVX @DPTR,A 1',
    'F2': 'MOVX @R0,A 1',
    'F3': 'MOVX @R1,A 1',
    'F4': 'CPL A 1',
    'F5': 'MOV 0x{},A 2',
    'F6': 'MOV @R0,A 1',
    'F7': 'MOV @R1,A 1',
    'F8': 'MOV R0,A 1',
    'F9': 'MOV R1,A 1',
    'FA': 'MOV R2,A 1',
    'FB': 'MOV R3,A 1',
    'FC': 'MOV R4,A 1',
    'FD': 'MOV R5,A 1',
    'FE': 'MOV R6,A 1',
    'FF': 'MOV R7,A 1',
}

# входные данные для ассемблера и двоичного кода
asm_input = "NOP\nAJMP addr\nLJMP addr"
bin_input = "00 01 02"

# вызов функций для преобразования ассемблера в двоичный код и обратно
binary_output = assemble_to_binary(read_lines(asm_input))
assemble_output = binary_to_assemble(bin_input)